from __future__ import annotations

from typing import Optional
from bson import ObjectId
from pymongo.collection import Collection

from config.mongo_connect import mongo
from constant.constant import INSTRUCTOR_DB_COLLECTION, ACADEMIC_DB_NAME
from mongo_ops.utils import _to_doc
from pydantic_models.instructor_models import InstructorData


# ---------------------------------------------------------------------------
# Mongo connection (opened once, reused)
# ---------------------------------------------------------------------------
_instructor_col: Collection = mongo.get_connection()[ACADEMIC_DB_NAME][INSTRUCTOR_DB_COLLECTION]


# ---------------------------------------------------------------------------
# CRUD
# ---------------------------------------------------------------------------

def add_instructor(instructor_data: InstructorData) -> ObjectId:
    """
    Insert a new instructor record.

    Returns
    -------
    bson.ObjectId
        `_id` generated by MongoDB.
    """
    result = _instructor_col.insert_one(_to_doc(instructor_data))
    return result.inserted_id


def get_instructor_data(instructor_id: str) -> Optional[InstructorData]:
    """
    Retrieve a single instructor by their `instructor_id`.

    Returns
    -------
    InstructorData | None
        Parsed instructor document, or `None` if not found.
    """
    doc = _instructor_col.find_one(
        {"instructor_id": instructor_id},
        {"_id": 0},  # don't expose internal Mongo ID
    )
    return InstructorData.model_validate(doc) if doc else None


def get_instructor_data_by_email_id(instructor_email_id: str) -> Optional[InstructorData]:
    """
    Retrieve a single instructor by their `instructor_email_id`.

    Returns
    -------
    InstructorData | None
        Parsed instructor document, or `None` if not found.
    """
    doc = _instructor_col.find_one(
        {"instructor_email_id": instructor_email_id},
        {"_id": 0},  # don't expose internal Mongo ID
    )
    return InstructorData.model_validate(doc) if doc else None