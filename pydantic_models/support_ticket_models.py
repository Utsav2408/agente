from datetime import date
from typing import List, Literal, Union
from pydantic import BaseModel, ConfigDict, Field


# ---------------------------------------------------------------------------
# “DATA” MODEL – persisted support ticket
# ---------------------------------------------------------------------------

class SupportTicketData(BaseModel):
    """
    Object stored in the database that represents a support ticket.
    """
    model_config = ConfigDict(
        frozen=True,
        validate_by_name=True,
        json_schema_extra={
            "example": {
                "support_ticket_id": "TICKET001",
                "student_id": "stu_001",
                "support_type": "course",
                "support_summary": "Issue accessing course material",
                "support_content": "I cannot open the PDF files for Week 3 of the Physics course.",
                "created_at": "2025-07-01",
                "assignee": "inst_1234",
                "resolved": False,
                "assignee_reply": "Please ensure you're logged in with your institute email.",
                "suggested_reply": "You may need to clear your browser cache and try again.",
                "checked": True
            }
        }
    )

    support_ticket_id: str = Field(..., description="Unique Identifier for the support ticket")
    student_id: str = Field(..., description="ID of the student who raised the ticket.")
    support_type: Literal["course", "administrative"] = Field(
        ..., description="Type of support requested: 'course' or 'administrative'."
    )
    support_summary: str = Field(..., description="Short summary of the issue.")
    support_content: str = Field(..., description="Detailed description of the issue.")
    created_at: date = Field(
        default_factory=date.today,
        description="Date the support ticket was created.",
    )
    assignee: str = Field(
        ..., description="ID of the person assigned to handle the ticket (instructor or admin)."
    )
    resolved: bool = Field(
        default=False,
        description="True if the ticket has been resolved, otherwise False.",
    )
    assignee_reply: str = Field(
        ..., description="Actual reply written by the assignee."
    )
    suggested_reply: str = Field(
        ..., description="Suggested reply generated by the system or assistant."
    )
    checked: bool = Field(
        default=False,
        description="True if the assistant (bot) generated a reply, otherwise False.",
    )


# ---------------------------------------------------------------------------
# REQUEST MODELS
# ---------------------------------------------------------------------------

class SupportTicketSpec(BaseModel):
    """
    Content supplied by the user when creating a new support ticket.
    Only includes user-provided fields.
    """
    model_config = ConfigDict(
        validate_by_name=True,
        json_schema_extra={
            "example": {
                "student_id": "stu_001",
                "support_type": "course",
                "support_summary": "Can't access Week 3 materials",
                "support_content": "The links to the course materials in Week 3 are broken."
            }
        }
    )

    support_type: Literal["course", "administrative"] = Field(
        ..., description="Type of support needed: 'course' or 'administrative'."
    )
    student_id: str = Field(..., description="ID of the student raising the ticket.")
    support_summary: str = Field(..., description="Summary of the issue.")
    support_content: str = Field(..., description="Detailed issue description.")


class ResolveTicketSpec(BaseModel):
    
    model_config = ConfigDict(
        validate_by_name=True,
        json_schema_extra={
            "example": {
                "support_ticket_id": "TICKET001",
                "assignee_reply": "You must login to the course before accessing the material"
            }
        }
    )

    support_ticket_id: str = Field(..., description="Unique Identifier for the support ticket")
    assignee_reply: str = Field(
        ..., description="Reply written by the assignee."
    )



class SupportTicketID(BaseModel):
    model_config = ConfigDict(
        validate_by_name=True,
        json_schema_extra={
            "example": {
                "support_ticket_id": "TICKET001"
            }
        }
    )

    support_ticket_id: str = Field(..., description="Unique Identifier for the support ticket")    


class ReturnSupportTicketData(BaseModel):
    model_config = ConfigDict(
        validate_by_name=True,
        json_schema_extra={
            "example": {
                "support_ticket_id": "TICKET001",
                "student_id": "stu_001",
                "support_type": "course",
                "support_content": "I cannot open the PDF files for Week 3 of the Physics course.",
                "created_at": "2025-07-01",
                "assignee": "inst_1234",
                "resolved": False,
                "assignee_reply": "Please ensure you're logged in with your institute email.",
            }
        }
    )

    support_ticket_id: str = Field(..., description="Unique Identifier for the support ticket")
    student_id: str = Field(..., description="ID of the student who raised the ticket.")
    support_type: Literal["course", "administrative"] = Field(
        ..., description="Type of support requested: 'course' or 'administrative'."
    )
    support_content: str = Field(..., description="Detailed description of the issue.")
    created_at: date = Field(
        default_factory=date.today,
        description="Date the support ticket was created.",
    )
    assignee: str = Field(
        ..., description="ID of the person assigned to handle the ticket (instructor or admin)."
    )
    resolved: bool = Field(
        default=False,
        description="True if the ticket has been resolved, otherwise False.",
    )
    assignee_reply: str = Field(
        ..., description="Actual reply written by the assignee."
    )

class ReturnSupportTicketDataForAssignee(BaseModel):
    model_config = ConfigDict(
        validate_by_name=True,
        json_schema_extra={
            "example": {
                "support_ticket_id": "TICKET001",
                "support_content": "I cannot open the PDF files for Week 3 of the Physics course.",
                "created_at": "2025-07-01",
                "resolved": True,
                "assignee_reply": "Please ensure you're logged in with your institute email.",
                "suggested_reply": "Please ensure you're logged in with your institute email.",
            }
        }
    )

    support_ticket_id: str = Field(..., description="Unique Identifier for the support ticket")
    support_content: str = Field(..., description="Detailed description of the issue.")
    created_at: date = Field(
        default_factory=date.today,
        description="Date the support ticket was created.",
    )
    resolved: bool = Field(
        default=False,
        description="True if the ticket has been resolved, otherwise False.",
    )
    assignee_reply: str = Field(
        ..., description="Actual reply written by the assignee."
    )
    suggested_reply: str = Field(
        ..., description="Suggested reply generated by the system or assistant."
    )

class ReturnSupportTicketSuggestion(BaseModel):
    model_config = ConfigDict(
        validate_by_name=True,
        json_schema_extra={
            "example": {
                "support_ticket_id": "TICKET001",
                "student_id": "stu_001",
                "support_summary": "Issue accessing course material",
                "support_content": "I cannot open the PDF files for Week 3 of the Physics course.",
                "created_at": "2025-07-01",
                "suggested_reply": "You may need to clear your browser cache and try again."
            }
        }
    )

    support_ticket_id: str = Field(..., description="Unique Identifier for the support ticket")
    support_content: str = Field(..., description="Detailed description of the issue.")
    created_at: date = Field(
        default_factory=date.today,
        description="Date the support ticket was created.",
    )
    suggested_reply: str = Field(
        ..., description="Suggested reply generated by the system or assistant."
    )

class ReturnSupportTicketForAssignee(BaseModel):
    model_config = ConfigDict(
        validate_by_name=True,
        json_schema_extra={
            "example": {
                "support_ticket_id": "TICKET001",
                "student_id": "stu_001",
                "support_content": "I cannot open the PDF files for Week 3 of the Physics course.",
                "created_at": "2025-07-01",
                "resolved": False,
                "assignee_reply": "Please ensure you're logged in with your institute email.",
            }
        }
    )

    support_ticket_id: str = Field(..., description="Unique Identifier for the support ticket")
    student_id: str = Field(..., description="ID of the student who raised the ticket.")
    support_content: str = Field(..., description="Detailed description of the issue.")
    created_at: date = Field(
        default_factory=date.today,
        description="Date the support ticket was created.",
    )
    resolved: bool = Field(
        default=False,
        description="True if the ticket has been resolved, otherwise False.",
    )
    assignee_reply: str = Field(
        ..., description="Actual reply written by the assignee."
    )

class ReturnAllSupportTicketForAssignee(BaseModel):
    model_config = ConfigDict(
        validate_by_name=True,
        json_schema_extra={
            "example": {
                "support_ticket_id": "TICKET001",
                "created_at": "2025-07-01",
                "resolved": False,
                "assignee_reply": "Please ensure you're logged in with your institute email."
            }
        }
    )

    support_ticket_id: str = Field(..., description="Unique Identifier for the support ticket")
    created_at: date = Field(
        default_factory=date.today,
        description="Date the support ticket was created.",
    )
    resolved: bool = Field(
        default=False,
        description="True if the ticket has been resolved, otherwise False.",
    )
    assignee_reply: str = Field(
        ..., description="Actual reply written by the assignee."
    )

class ReturnSupportTicketDataRequestAssignee(BaseModel):
    model_config = ConfigDict(
        validate_by_name=True,
        json_schema_extra={
            "examples": [
                {
                    "data": [ReturnAllSupportTicketForAssignee.model_config["json_schema_extra"]["example"]],
                    "count": 1
                },
                {
                    "data": [ReturnSupportTicketForAssignee.model_config["json_schema_extra"]["example"]],
                    "count": 1
                },
                {
                    "data": [ReturnSupportTicketSuggestion.model_config["json_schema_extra"]["example"]],
                    "count": 1                    
                }
            ]
        }
    )

    data: Union[
        List[ReturnAllSupportTicketForAssignee],
        List[ReturnSupportTicketForAssignee],
        List[ReturnSupportTicketSuggestion]
    ] = Field(
        default_factory=list,
        description="Support ticket details assigned to assignee",
    )
    count: int = Field(
        default=0,
        description="Count of number of support tickets returned"
    )